schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# whether this query should be cached (Hasura Cloud only)
directive @cached(
  # measured in seconds
  ttl: Int! = 60
  # refresh the cache entry
  refresh: Boolean! = false
) on QUERY
# Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# mutation root
type mutation_root {
  # delete data from the table: "tasks"
  delete_tasks(
    # filter the rows which have to be deleted
    where: tasks_bool_exp!
  ): tasks_mutation_response
  # delete single row from the table: "tasks"
  delete_tasks_by_pk(id: uuid!): tasks
  # insert data into the table: "tasks"
  insert_tasks(
    # the rows to be inserted
    objects: [tasks_insert_input!]!
    # on conflict condition
    on_conflict: tasks_on_conflict
  ): tasks_mutation_response
  # insert a single row into the table: "tasks"
  insert_tasks_one(
    # the row to be inserted
    object: tasks_insert_input!
    # on conflict condition
    on_conflict: tasks_on_conflict
  ): tasks
  # update data of the table: "tasks"
  update_tasks(
    # sets the columns of the filtered rows to the given values
    _set: tasks_set_input
    # filter the rows which have to be updated
    where: tasks_bool_exp!
  ): tasks_mutation_response
  # update single row of the table: "tasks"
  update_tasks_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: tasks_set_input
    pk_columns: tasks_pk_columns_input!
  ): tasks
}

# column ordering options
enum order_by {
  # in ascending order, nulls last
  asc
  # in ascending order, nulls first
  asc_nulls_first
  # in ascending order, nulls last
  asc_nulls_last
  # in descending order, nulls first
  desc
  # in descending order, nulls first
  desc_nulls_first
  # in descending order, nulls last
  desc_nulls_last
}

type query_root {
  # fetch data from the table: "tasks"
  tasks(
    # distinct select on columns
    distinct_on: [tasks_select_column!]
    # limit the number of rows returned
    limit: Int
    # skip the first n rows. Use only with order_by
    offset: Int
    # sort the rows by one or more columns
    order_by: [tasks_order_by!]
    # filter the rows returned
    where: tasks_bool_exp
  ): [tasks!]!
  # fetch aggregated fields from the table: "tasks"
  tasks_aggregate(
    # distinct select on columns
    distinct_on: [tasks_select_column!]
    # limit the number of rows returned
    limit: Int
    # skip the first n rows. Use only with order_by
    offset: Int
    # sort the rows by one or more columns
    order_by: [tasks_order_by!]
    # filter the rows returned
    where: tasks_bool_exp
  ): tasks_aggregate!
  # fetch data from the table: "tasks" using primary key columns
  tasks_by_pk(id: uuid!): tasks
}

# Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  # does the column match the given case-insensitive pattern
  _ilike: String
  _in: [String!]
  # does the column match the given POSIX regular expression, case insensitive
  _iregex: String
  _is_null: Boolean
  # does the column match the given pattern
  _like: String
  _lt: String
  _lte: String
  _neq: String
  # does the column NOT match the given case-insensitive pattern
  _nilike: String
  _nin: [String!]
  # does the column NOT match the given POSIX regular expression, case insensitive
  _niregex: String
  # does the column NOT match the given pattern
  _nlike: String
  # does the column NOT match the given POSIX regular expression, case sensitive
  _nregex: String
  # does the column NOT match the given SQL regular expression
  _nsimilar: String
  # does the column match the given POSIX regular expression, case sensitive
  _regex: String
  # does the column match the given SQL regular expression
  _similar: String
}

type subscription_root {
  # fetch data from the table: "tasks"
  tasks(
    # distinct select on columns
    distinct_on: [tasks_select_column!]
    # limit the number of rows returned
    limit: Int
    # skip the first n rows. Use only with order_by
    offset: Int
    # sort the rows by one or more columns
    order_by: [tasks_order_by!]
    # filter the rows returned
    where: tasks_bool_exp
  ): [tasks!]!
  # fetch aggregated fields from the table: "tasks"
  tasks_aggregate(
    # distinct select on columns
    distinct_on: [tasks_select_column!]
    # limit the number of rows returned
    limit: Int
    # skip the first n rows. Use only with order_by
    offset: Int
    # sort the rows by one or more columns
    order_by: [tasks_order_by!]
    # filter the rows returned
    where: tasks_bool_exp
  ): tasks_aggregate!
  # fetch data from the table: "tasks" using primary key columns
  tasks_by_pk(id: uuid!): tasks
}

# columns and relationships of "tasks"
type tasks {
  created_at: timestamptz!
  description: String!
  developer_id: String!
  id: uuid!
  isCompleted: Boolean!
  title: String!
  updated_at: timestamptz!
}

# aggregated selection of "tasks"
type tasks_aggregate {
  aggregate: tasks_aggregate_fields
  nodes: [tasks!]!
}

# aggregate fields of "tasks"
type tasks_aggregate_fields {
  count(columns: [tasks_select_column!], distinct: Boolean): Int!
  max: tasks_max_fields
  min: tasks_min_fields
}

# Boolean expression to filter rows from the table "tasks". All fields are combined with a logical 'AND'.
input tasks_bool_exp {
  _and: [tasks_bool_exp!]
  _not: tasks_bool_exp
  _or: [tasks_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  developer_id: String_comparison_exp
  id: uuid_comparison_exp
  isCompleted: Boolean_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "tasks"
enum tasks_constraint {
  # unique or primary key constraint
  tasks_pkey
}

# input type for inserting data into table "tasks"
input tasks_insert_input {
  created_at: timestamptz
  description: String
  developer_id: String
  id: uuid
  isCompleted: Boolean
  title: String
  updated_at: timestamptz
}

# aggregate max on columns
type tasks_max_fields {
  created_at: timestamptz
  description: String
  developer_id: String
  id: uuid
  title: String
  updated_at: timestamptz
}

# aggregate min on columns
type tasks_min_fields {
  created_at: timestamptz
  description: String
  developer_id: String
  id: uuid
  title: String
  updated_at: timestamptz
}

# response of any mutation on the table "tasks"
type tasks_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!
  # data from the rows affected by the mutation
  returning: [tasks!]!
}

# on conflict condition type for table "tasks"
input tasks_on_conflict {
  constraint: tasks_constraint!
  update_columns: [tasks_update_column!]! = []
  where: tasks_bool_exp
}

# Ordering options when selecting data from "tasks".
input tasks_order_by {
  created_at: order_by
  description: order_by
  developer_id: order_by
  id: order_by
  isCompleted: order_by
  title: order_by
  updated_at: order_by
}

# primary key columns input for table: tasks
input tasks_pk_columns_input {
  id: uuid!
}

# select columns of table "tasks"
enum tasks_select_column {
  # column name
  created_at
  # column name
  description
  # column name
  developer_id
  # column name
  id
  # column name
  isCompleted
  # column name
  title
  # column name
  updated_at
}

# input type for updating data in table "tasks"
input tasks_set_input {
  created_at: timestamptz
  description: String
  developer_id: String
  id: uuid
  isCompleted: Boolean
  title: String
  updated_at: timestamptz
}

# update columns of table "tasks"
enum tasks_update_column {
  # column name
  created_at
  # column name
  description
  # column name
  developer_id
  # column name
  id
  # column name
  isCompleted
  # column name
  title
  # column name
  updated_at
}

scalar timestamptz

# Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

# Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

